#依赖软件包安装
sudo apt install uboot-tools libssl-dev flex bison ninja-build libglib2.0-dev libpixman-1-dev libslirp-dev

#环境变量
export CROSS_COMPILE=/home/ws/Src/hypervisor/arm-gnu-toolchain/bin/aarch64-none-elf-
export XVISOR_DIR=/home/ws/Src/hypervisor/xvisor
export BUSYBOX_DIR=/home/ws/Src/hypervisor/busybox
export LINUX_DIR=/home/ws/Src/hypervisor/linux
export QEMU_DIR=/home/ws/Src/hypervisor/qemu
export UBOOT_DIR=/home/ws/Src/hypervisor/u-boot
export FIRMWARE=/home/ws/Src/hypervisor/arm-trusted-firmware

#编译qemu
cd $QEMU_DIR
mkdir -p build
cd build
../configure --target-list=aarch64-softmmu --enable-slirp --enable-debug
make -j 8

#编译u-boot
cd $UBOOT_DIR
rm -rf .config
make qemu_arm64_defconfig
echo "CONFIG_SYS_TEXT_BASE=0x50000000" >> .config
echo "CONFIG_TFABOOT=y" >> .config
make -j8

#编译arm-trusted，依赖u-boot.bin，生成flash.bin
cd $FIRMWARE
make PLAT=qemu bl1 fip BL33=$UBOOT_DIR/u-boot.bin QEMU_USE_GIC_DRIVER=QEMU_GICV3
dd if=build/qemu/release/bl1.bin of=flash.bin
dd if=build/qemu/release/fip.bin of=flash.bin seek=64 bs=4096 conv=notrunc

#编译linux
cd $LINUX_DIR
cp -rf arch/arm64/configs/defconfig arch/arm64/configs/tmp-virt-v8_defconfig
$XVISOR_DIR/tests/common/scripts/update-linux-defconfig.sh -p arch/arm64/configs/tmp-virt-v8_defconfig -f $XVISOR_DIR/xvisor/tests/arm64/virt-v8/linux/linux_extra.config
make ARCH=arm64 tmp-virt-v8_defconfig
make ARCH=arm64 Image dtbs -j 8

#编译busybox
cd $BUSYBOX_DIR
cp $XVISOR_DIR/tests/common/busybox/busybox-1.33.1_defconfig $BUSYBOX_DIR/.config
make oldconfig
make install
mkdir -p ./_install/etc/init.d
mkdir -p ./_install/dev
mkdir -p ./_install/proc
mkdir -p ./_install/sys
ln -sf /sbin/init ./_install/init
cp -f $XVISOR_DIR/tests/common/busybox/fstab ./_install/etc/fstab
cp -f $XVISOR_DIR/tests/common/busybox/rcS ./_install/etc/init.d/rcS
cp -f $XVISOR_DIR/tests/common/busybox/motd ./_install/etc/motd
cp -f $XVISOR_DIR/tests/common/busybox/logo_linux_clut224.ppm ./_install/etc/logo_linux_clut224.ppm
cp -f $XVISOR_DIR/tests/common/busybox/logo_linux_vga16.ppm ./_install/etc/logo_linux_vga16.ppm
cd ./_install; find ./ | cpio -o -H newc > ../rootfs.img; cd -

#编译xvisor
cd $XVISOR_DIR
make ARCH=arm generic-v8-defconfig # make menuconfig
make all
make -C tests/arm64/virt-v8/basic
mkdir -p ./build/disk/tmp
mkdir -p ./build/disk/system
cp -f ./docs/banner/roman.txt ./build/disk/system/banner.txt
cp -f ./docs/logo/xvisor_logo_name.ppm ./build/disk/system/logo.ppm
mkdir -p ./build/disk/images/arm64/virt-v8
dtc -q -I dts -O dtb -o ./build/disk/images/arm64/virt-v8-guest.dtb ./tests/arm64/virt-v8/virt-v8-guest.dts
cp -f ./build/tests/arm64/virt-v8/basic/firmware.bin ./build/disk/images/arm64/virt-v8/firmware.bin
cp -f ./tests/arm64/virt-v8/linux/nor_flash.list ./build/disk/images/arm64/virt-v8/nor_flash.list
cp -f ./tests/arm64/virt-v8/linux/cmdlist ./build/disk/images/arm64/virt-v8/cmdlist
cp -f ./tests/arm64/virt-v8/xscript/one_guest_virt-v8.xscript ./build/disk/boot.xscript
cp -f $LINUX_DIR/arch/arm64/boot/Image ./build/disk/images/arm64/virt-v8/Image
dtc -q -I dts -O dtb -o ./build/disk/images/arm64/virt-v8/virt-v8.dtb ./tests/arm64/virt-v8/linux/virt-v8.dts
cp -f $BUSYBOX_DIR/rootfs.img ./build/disk/images/arm64/virt-v8/rootfs.img
genext2fs -B 4096 -b 65535 -d ./build/disk ./build/disk.img
mkimage -A arm64 -O linux -T kernel -C none -a 0x50000000 -e 0x50000000 -n Xvisor -d build/vmm.bin build/uvmm.bin
mkimage -A arm64 -O linux -T ramdisk -a 0x00000000 -n "Xvisor Ramdisk" -d build/disk.img build/udisk.img

#qemu启动
$QEMU_DIR/build/qemu-system-aarch64 -nographic \
	-M virt,secure=on,virtualization=on,gic-version=3 \
	-cpu cortex-a72 -smp 4 -m 4G \
	-bios $FIRMWARE/flash.bin \
	-device loader,file="$XVISOR_DIR/build/uvmm.bin",addr=0x50000000,force-raw=on \
	-device loader,file="$XVISOR_DIR/build/arch/arm/dts/arm/aarch64-qemu-virt.dtb",addr=0x58000000,force-raw=on \
	-device loader,file="$XVISOR_DIR/build/udisk.img",addr=0x70000000,force-raw=on \
	-device virtio-net-device,netdev=net0 \
	-netdev user,id=net0,net=192.168.42.0/24,hostfwd=tcp:127.0.0.1:5555-:22 \
	-device virtio-serial-device -chardev pty,id=serial3 -device virtconsole,chardev=serial3

=> bootm 0x50000000 0x70000000 0x58000000


